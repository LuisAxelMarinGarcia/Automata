transiciones = {
    (0, '3'): 1, (0, '4'): 10, (0, '5'): 10, (0, '6'): 10,
    (0, '7'): 10, (0, '8'): 10, (0, '9'): 19, (1, '-'): 2,    
    (2, 'M'): 3, (2, 'N'): 12, (2, 'O'): 12, (2, 'P'): 12,
    (2, 'Q'): 12, (2, 'R'): 12, (2, 'S'): 12, (2, 'T'): 12,
    (2, 'U'): 12, (2, 'V'): 12, (2, 'W'): 12, (2, 'X'): 12,
    (2, 'Y'): 12, (2, 'Z'): 12,
    (3, 'R'): 4, (3, 'S'): 13, (3, 'T'): 13, (3, 'U'): 13,
    (3, 'V'): 13, (3, 'W'): 13, (3, 'X'): 13, (3, 'Y'): 13,
    (3, 'Z'): 13, (4, '-'): 5, (5, '0'): 7, (5, '1'): 18,
    (5, '2'): 18, (5, '3'): 18, (5, '4'): 18, (5, '5'): 18,
    (5, '6'): 18, (5, '7'): 18, (5, '8'): 18, (5, '9'): 18,
    (7, '1'): 8, (7, '2'): 16, (7, '3'): 16, (7, '4'): 16,
    (7, '5'): 16, (7, '6'): 16, (7, '7'): 16, (7, '8'): 16,
    (7, '9'): 16, (8, 'Z'): 9, (10, '-'): 11, (11, 'A'): 12,
    (11, 'B'): 12, (11, 'C'): 12, (11, 'D'): 12, (11, 'E'): 12,
    (11, 'F'): 12, (11, 'G'): 12, (11, 'H'): 12, (11, 'I'): 12,
    (11, 'J'): 12, (11, 'K'): 12, (11, 'L'): 12, (11, 'M'): 12,
    (11, 'N'): 12, (11, 'O'): 12, (11, 'P'): 12, (11, 'Q'): 12,
    (11, 'R'): 12, (11, 'S'): 12, (11, 'T'): 12, (11, 'U'): 12,
    (11, 'V'): 12, (11, 'W'): 12, (11, 'X'): 12, (11, 'Y'): 12,
    (11, 'Z'): 12, (12, 'A'): 13, (12, 'B'): 13, (12, 'C'): 13,
    (12, 'D'): 13, (12, 'E'): 13, (12, 'F'): 13, (12, 'G'): 13,
    (12, 'H'): 13, (12, 'I'): 13, (12, 'J'): 13, (12, 'K'): 13,
    (12, 'L'): 13, (12, 'M'): 13, (12, 'N'): 13, (12, 'O'): 13,
    (12, 'P'): 13, (12, 'Q'): 13, (12, 'R'): 13, (12, 'S'): 13,
    (12, 'T'): 13, (12, 'U'): 13, (12, 'V'): 13, (12, 'W'): 13,
    (12, 'X'): 13, (12, 'Y'): 13, (12, 'Z'): 13, (13, '-'): 14,
    (14, '0'): 15, (14, '1'): 18, (14, '2'): 18, (14, '3'): 18,
    (14, '4'): 18, (14, '5'): 18, (14, '6'): 18, (14, '7'): 18,
    (14, '8'): 18, (14, '9'): 18, (18, '0'): 16, (18, '1'): 16,
    (18, '2'): 16, (18, '3'): 16, (18, '4'): 16, (18, '5'): 16,
    (18, '6'): 16, (18, '7'): 16, (18, '8'): 16, (18, '9'): 16,
    (15, '1'): 16, (15, '2'): 16, (15, '3'): 16, (15, '4'): 16,
    (15, '5'): 16, (15, '6'): 16, (15, '7'): 16, (15, '8'): 16,
    (15, '9'): 16, (16, 'A'): 17, (16, 'B'): 17, (16, 'C'): 17,
    (16, 'D'): 17, (16, 'E'): 17, (16, 'F'): 17, (16, 'G'): 17,
    (16, 'H'): 17, (16, 'I'): 17, (16, 'J'): 17, (16, 'K'): 17,
    (16, 'L'): 17, (16, 'M'): 17, (16, 'N'): 17, (16, 'O'): 17,
    (16, 'P'): 17, (16, 'Q'): 17, (16, 'R'): 17, (16, 'S'): 17,
    (16, 'T'): 17, (16, 'U'): 17, (16, 'V'): 17, (16, 'W'): 17,
    (16, 'X'): 17, (16, 'Y'): 17, (16, 'Z'): 17, (19, '-'): 20,
    (20, 'N'): 21, (20, 'A'): 12, (20, 'B'): 12, (20, 'C'): 12,
    (20, 'D'): 12, (20, 'E'): 12, (20, 'F'): 12, (20, 'G'): 12,
    (20, 'H'): 12, (20, 'I'): 12, (20, 'J'): 12, (20, 'K'): 12,
    (20, 'L'): 12, (20, 'M'): 12, (21, 'A'): 13, (21, 'B'): 13,
    (21, 'C'): 13, (21, 'D'): 13, (21, 'E'): 13, (21, 'F'): 13,
    (21, 'G'): 22, (22, '-'): 23, (23, '0'): 30, (23, '1'): 27,
    (23, '2'): 27, (23, '3'): 27, (23, '4'): 27, (23, '5'): 27,
    (23, '6'): 27, (23, '7'): 27, (23, '8'): 27, (23, '9'): 24,
    (24, '0'): 31, (24, '1'): 31, (24, '2'): 31, (24, '3'): 31,
    (24, '4'): 31, (24, '5'): 31, (24, '6'): 31, (24, '7'): 31,
    (24, '8'): 31, (24, '9'): 25, (25, 'A'): 26, (27, '0'): 31,
    (27, '1'): 31, (27, '2'): 31, (27, '3'): 31, (27, '4'): 31,
    (27, '5'): 31, (27, '6'): 31, (27, '7'): 31, (27, '8'): 31,
    (27, '9'): 31, (30, '1'): 31, (30, '2'): 31, (30, '3'): 31,
    (30, '4'): 31, (30, '5'): 31, (30, '6'): 31, (30, '7'): 31,
    (30, '8'): 31, (30, '9'): 31, (31, 'A'): 32, (31, 'B'): 32,
    (31, 'C'): 32, (31, 'D'): 32, (31, 'E'): 32, (31, 'F'): 32,
    (31, 'G'): 32, (31, 'H'): 32, (31, 'I'): 32, (31, 'J'): 32,
    (31, 'K'): 32, (31, 'L'): 32, (31, 'M'): 32, (31, 'N'): 32,
    (31, 'O'): 32, (31, 'P'): 32, (31, 'Q'): 32, (31, 'R'): 32,
    (31, 'S'): 32, (31, 'T'): 32, (31, 'U'): 32, (31, 'V'): 32,
    (31, 'W'): 32, (31, 'X'): 32, (31, 'Y'): 32, (31, 'Z'): 32,
}

estados_finales = {9, 17, 26, 32}

def validar_entrada(entrada):
    estado = 0
    recorrido = [f'q{estado}']
    for i, caracter in enumerate(entrada):
        transicion = transiciones.get((estado, caracter))
        if transicion is None:
            return False, recorrido, i 
        estado = transicion
        recorrido.append(f'q{estado}')
    return estado in estados_finales, recorrido, -1  
